/*
Copyright 2019 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/projectriff/bindings/pkg/apis/bindings/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpringBootContainerLister helps list SpringBootContainers.
type SpringBootContainerLister interface {
	// List lists all SpringBootContainers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpringBootContainer, err error)
	// SpringBootContainers returns an object that can list and get SpringBootContainers.
	SpringBootContainers(namespace string) SpringBootContainerNamespaceLister
	SpringBootContainerListerExpansion
}

// springBootContainerLister implements the SpringBootContainerLister interface.
type springBootContainerLister struct {
	indexer cache.Indexer
}

// NewSpringBootContainerLister returns a new SpringBootContainerLister.
func NewSpringBootContainerLister(indexer cache.Indexer) SpringBootContainerLister {
	return &springBootContainerLister{indexer: indexer}
}

// List lists all SpringBootContainers in the indexer.
func (s *springBootContainerLister) List(selector labels.Selector) (ret []*v1alpha1.SpringBootContainer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpringBootContainer))
	})
	return ret, err
}

// SpringBootContainers returns an object that can list and get SpringBootContainers.
func (s *springBootContainerLister) SpringBootContainers(namespace string) SpringBootContainerNamespaceLister {
	return springBootContainerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpringBootContainerNamespaceLister helps list and get SpringBootContainers.
type SpringBootContainerNamespaceLister interface {
	// List lists all SpringBootContainers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpringBootContainer, err error)
	// Get retrieves the SpringBootContainer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpringBootContainer, error)
	SpringBootContainerNamespaceListerExpansion
}

// springBootContainerNamespaceLister implements the SpringBootContainerNamespaceLister
// interface.
type springBootContainerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpringBootContainers in the indexer for a given namespace.
func (s springBootContainerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpringBootContainer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpringBootContainer))
	})
	return ret, err
}

// Get retrieves the SpringBootContainer from the indexer for a given namespace and name.
func (s springBootContainerNamespaceLister) Get(name string) (*v1alpha1.SpringBootContainer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("springbootcontainer"), name)
	}
	return obj.(*v1alpha1.SpringBootContainer), nil
}
