/*
Copyright 2019 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/projectriff/bindings/pkg/apis/service/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProvisionedServiceLister helps list ProvisionedServices.
type ProvisionedServiceLister interface {
	// List lists all ProvisionedServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionedService, err error)
	// ProvisionedServices returns an object that can list and get ProvisionedServices.
	ProvisionedServices(namespace string) ProvisionedServiceNamespaceLister
	ProvisionedServiceListerExpansion
}

// provisionedServiceLister implements the ProvisionedServiceLister interface.
type provisionedServiceLister struct {
	indexer cache.Indexer
}

// NewProvisionedServiceLister returns a new ProvisionedServiceLister.
func NewProvisionedServiceLister(indexer cache.Indexer) ProvisionedServiceLister {
	return &provisionedServiceLister{indexer: indexer}
}

// List lists all ProvisionedServices in the indexer.
func (s *provisionedServiceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionedService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionedService))
	})
	return ret, err
}

// ProvisionedServices returns an object that can list and get ProvisionedServices.
func (s *provisionedServiceLister) ProvisionedServices(namespace string) ProvisionedServiceNamespaceLister {
	return provisionedServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisionedServiceNamespaceLister helps list and get ProvisionedServices.
type ProvisionedServiceNamespaceLister interface {
	// List lists all ProvisionedServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionedService, err error)
	// Get retrieves the ProvisionedService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ProvisionedService, error)
	ProvisionedServiceNamespaceListerExpansion
}

// provisionedServiceNamespaceLister implements the ProvisionedServiceNamespaceLister
// interface.
type provisionedServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisionedServices in the indexer for a given namespace.
func (s provisionedServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionedService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionedService))
	})
	return ret, err
}

// Get retrieves the ProvisionedService from the indexer for a given namespace and name.
func (s provisionedServiceNamespaceLister) Get(name string) (*v1alpha1.ProvisionedService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisionedservice"), name)
	}
	return obj.(*v1alpha1.ProvisionedService), nil
}
